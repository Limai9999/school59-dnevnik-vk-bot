import { CommandInputData, CommandOutputData } from '../types/Commands';
import { Payload } from '../types/VK/Payloads/Payload';

async function command({ message, vk, args, events }: CommandInputData) {
  if (!args.length) {
    const eventList = events.events;

    const eventListStringified = eventList.map((event, index) => {
      const { name, executeProbability, disabled } = event;

      const statusString = disabled ? '–í—ã–∫–ª—é—á–µ–Ω–æ üî¥' : '–í–∫–ª—é—á–µ–Ω–æ üü¢';

      return `${index + 1}. ${name}.\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞: ${executeProbability}\n–°—Ç–∞—Ç—É—Å: ${statusString}`;
    });

    const eventListMessage = `–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: ${eventList.length}\n\n${eventListStringified.join('\n\n')}\n\n–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ: useEvent [–Ω–∞–∑–≤–∞–Ω–∏–µ].`;

    return vk.sendMessage({
      peerId: message.peerId,
      message: eventListMessage,
    });
  }

  const [executingEventName] = args;

  const executeStatus = await events.executeEventByName(message, executingEventName);
  if (!executeStatus) {
    return vk.sendMessage({
      peerId: message.peerId,
      message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ.',
    });
  }
}

const cmd: CommandOutputData = {
  name: 'useEvent',
  aliases: [],
  description: '–∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≤–µ–Ω—Ç –ø–æ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—é',
  payload: { command: 'useEvent' } as Payload,
  requirements: {
    admin: true,
    dmOnly: false,
    args: 0,
    paidSubscription: false,
    payloadOnly: true,
  },
  showInAdditionalMenu: false,
  showInCommandsList: true,
  howToUse: null,
  execute: command,
};

export default cmd;
